1. Use the constructor methods to create different data types in python (integer,float,string,list,tuple,dictionary,set etc.). 
Also use object literals to create those data types.
solutions: 
int(5) - Output: 5 
x=int(5),print(x) - Output:  5
float(5.5) - Output: 5.5 
x=float(5.5), print(x) - Output: 5.5 
str("Jessica") - Output: 'Jessica'  
x=str("Jessica"), print(x)- -Output: Jessica
list([1,2,3]) - Output: [1, 2, 3] 
x=list([1,2,3]), print(x) - Output: [1, 2, 3]  
tuple((1,2,3)) - Output: (1, 2, 3)
x=tuple([1,2,3]), print(x) - Output: (1, 2, 3) 

3. Create two operands and play around using different operators.
solutions: 
dict({"name":"Jenna","age":45}) - Output: {'name': 'Jenna', 'age': 45}
thisdict = {"name": "Jenna", "age": 45, "country": "Finland"}
print(thisdict["name"]) - Output: Jenna
set([1,2,3])   - Output: {1, 2, 3}      
x=set([2,3,4]), print(x)  - Output: {2, 3, 4}       
x=5, y=3: print(x+y) # Addition operator - Output: 8       
x=8, y=3: print(x-y) # Subtraction operator - Output:5
x=6, y=2: print(x*y) # Multiplication operator - Output: 12
x=10, y=3: print(x/y) # Division operator - Output:3.3333333333333335
x=5, y=3: print(x%y) # Modulus operator - Output: 2


4.Once you create an object of each data type, run dir(object). Navigate the magic methods/dunder methods and other methods and attributes of each object. 
Try to implement those methods and attributes as many as possible.
solutions:  
my_list = [1, 2, 3]; dir(my_list) 
# output: ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', 
'__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getstate__', '__gt__', '__hash__', '__iadd__', 
'__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', 
'__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
dic = {"a": 1, "b": 2, "c": 3}, print("Type:",type(dic)) - output: Type: <class 'dict'>   
tpl=(1,2,3,4), print("Length: ", len(tpl))- Ouput: Length:  4
st = {1, 2, 3, 4, 5}, print("Add 6: ", st) - Output: Add 6:  {1, 2, 3, 4, 5}
str_var = "Hello World", print("Lowercase:",str_var.lower()), Lowercase: hello world

5. Familiarize yourself with indexing in python.Iterables can be accessed using index values in python. Eg: list, tuple,dict, set 
a) Create a list of items. 
solution: mylist=["Finland", "Sweden", "Denmark", "Netherlands","Germany", "Norway","Iceland"]
print(mylist) # Output:['Finland', 'Sweden', 'Denmark', 'Netherlands', 'Germany', 'Norway', 'Iceland']

b) Find the index of “Sweden”. 
solution: mylist=["Finland","Sweden","Denmark","Netherlands", "Germany", "Norway","Iceland"]
print(mylist.index("Sweden")) #Output:1

c) Get all the items except the first
solution:  myList = ["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
# Get All Value Except First One
for listElem in myList[1:]:
    print(listElem)
# Output:    
Sweden
Denmark
Netherlands
Germany
Norway
Iceland

d) Get all the items except the last
solution:  myList = ["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
# Get All Value Except Last One
for listElem in myList[:-1]:
  print(listElem)
  #Output: Finland
Sweden
Denmark
Netherlands
Germany
Norway
  
e) Find the last item using negative indexing
solution: myList = ["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
print(myList[-1]) 
#Ouput: Iceland

f) Find the last three item using negative indexing
solution: myList = ["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
print(myList[-3])
#Output: Germany

g) Grab all the items with odd indices
solution: ?

h) Find the first and last item for the list
solution: myList = ["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
#printing original list
print("The orginal list is:"+str(myList))
The orginal list is:['Finland', 'Sweden', 'Denmark', 'Netherlands', 'Germany', 'Norway', 'Iceland']
#using list comprehension
#to get first and last element of list
res=[myList[i] for i in (0,-1)]
# printing result
print("The first and last element of list are : " + str(res))
#Output: The first and last element of list are : ['Finland', 'Iceland']

i) Get [”Netherlands”,”Germany”,”Norway”] using negative indexing
countries=["Norway","Germany","Netherlands", "Sweden"]
 result=[countries[-2],countries[-3],countries[-4]]
 print(result)
 #Output: ['Netherlands', 'Germany', 'Norway']
 
j) Reverse the list
Solution: myList = ["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
      #reversing the list
      #assigning the reversed list to a variable
      reversed_list=myList[::-1]
      #returns the reversed list
      print(reversed_list)  
#Output: ['Iceland', 'Norway', 'Germany', 'Netherlands', 'Denmark', 'Sweden', 'Finland

k) What is the output of countries[::-2]
solution: myList= ["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
print(myList[-2])
#Output: Norway

l) What is the output of countries[1:100:2]?
solution: myList=["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
print(myList[1:100:2])
#Output:['Sweden', 'Netherlands', 'Norway']

m) What is the output of countries[len(countries)-1:0:2]?
solution: countries=["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"], countries[len(countries)-1:0:2]
 #Output: []

n) Use enumerate method to get index and values in the list
solution: myList=["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
enumerate(myList)
<enumerate object at 0x10bdbf150>
list(enumerate(myList))
#Ouput: [(0, 'Finland'), (1, 'Sweden'), (2, 'Denmark'), (3, 'Netherlands'), (4, 'Germany'), (5, 'Norway'), (6, 'Iceland')]

6. Exercise on dictionaries
a) Given the two lists of same length, create a dictionary using a list as keys and another list as values without using loop
Eg: ["a","b","c","d"],[1,2,3,4] lists should be made {'a': 1, 'b': 2, 'c': 3, 'd': 4}
Hint: zip method
Solution: myList=["Finland","Sweden","Denmark", "Netherlands", "Germany","Norway", "Iceland"]
values =[1,2,3,4,5,6,7]
dictionary = dict(zip(myList, values))
print(dictionary)
#Output: {'Finland': 1, 'Sweden': 2, 'Denmark': 3, 'Netherlands': 4, 'Germany': 5, 'Norway': 6, 'Iceland': 7}

b) Create two dictionaries, merge them into one.
Hint: update method/dictionary unpacking
solution: dict1 = {'dog':1,'cat':2}
dict2 = {'horse':3, 'bird':4}
merged_dict = {**dict1,**dict2}
print(merged_dict)
#Output: {'dog': 1, 'cat': 2, 'horse': 3, 'bird': 4}

c) Given the list of students, assign them the course.
Students=[“Duy”, “Laxmi”,”Antonio”,”Maria”]
Course["Python","Database","ML"] 
Should result to the new dictionary students_profile=
{'Duy': ['Python', 'Database', 'ML'], 'Laxmi': ['Python', 'Database', 'ML'],
 'Antonio': ['Python', 'Database', 'ML'],'Maria': ['Python', 'Database', 'ML']}
 Solution: 
students=['Duy','laxmi','Antonio', 'Maria']
courses=['Python','Database','ML']
#assign each student the list of courses
students_profile = {student: courses for student in students}
print(students_profile)

d) Modify Antonio’s course to ["JavaScript","Database","NodeJS"]
solutions: students=['Duy', 'Laxmi', 'Antonio','Maria']
courses=['python','database','ML']
students_profile=dict.fromkeys(students, courses)
#change Antonio's courses
students_profile['Antonio']=['JavaScript','Database','NodeJS']
print(students_profile)
#Output:{'Duy': ['python', 'database', 'ML'], 'Laxmi': ['python', 'database', 'ML'], 'Antonio': ['JavaScript', 'Database', 'NodeJS'], 'Maria': ['python', 'database', 'ML']}

e)Add “ReactJs” to Anonio’s course
solutions: students = ['Duy','Laxmi','Antonio','Maria']
courses = ['python','Database','ML']
students_profile = dict.fromkeys(students, courses)
#add "ReactJs" to Antonio's course
students_profile['Antonio'].append('ReactJs')
print(students_profile)
#Output: {'Duy': ['python', 'Database', 'ML', 'ReactJs'], 'Laxmi': ['python', 'Database', 'ML', 'ReactJs'], 'Antonio': ['python', 'Database', 'ML', 'ReactJs'],
'Maria': ['python', 'Database', 'ML', 'ReactJs']}
